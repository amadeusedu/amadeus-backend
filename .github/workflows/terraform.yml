name: Terraform Blue-Green Deploy

on:
  pull_request:
  push:
    branches: [staging, main]

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      TF_CLI_ARGS: "-no-color"
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    defaults:
      run:
        shell: bash
        working-directory: infra/gateway

    steps:
      # 1. Checkout repo
      - uses: actions/checkout@v3

      # 2. Install Terraform CLI
      - uses: hashicorp/setup-terraform@v2

      # 3. Configure AWS credentials (supports session token if provided)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}
          role-to-assume:        ${{ secrets.AWS_ROLE_TO_ASSUME || '' }}

      # 4. Cache Terraform providers
      - name: Cache Terraform providers
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}

      # 5. Select or create workspace
      - name: Select workspace
        id: ws
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            WS=production
          else
            WS=staging
          fi
          terraform workspace list | grep -q "$WS" || terraform workspace new "$WS"
          terraform workspace select "$WS"
          echo "ws=$WS" >> "$GITHUB_OUTPUT"

      # 6. Terraform init
      - name: Terraform init
        run: terraform init -reconfigure

      # 7. Decide colour (blue/green)
      - name: Decide colour
        id: colour
        run: |
          if [[ "${{ steps.ws.outputs.ws }}" == "production" ]]; then
            if terraform state list | grep -q 'aws_apigatewayv2_stage.bg_stage'; then
              CURRENT=$(terraform state show aws_apigatewayv2_stage.bg_stage | awk '/name/ {print $3}')
              [[ "$CURRENT" == "blue" ]] && NEXT=green || NEXT=blue
            else
              NEXT=blue   # first prod deploy
            fi
          else
            NEXT=blue     # staging always blue
          fi
          echo "next=$NEXT" >> "$GITHUB_OUTPUT"
          echo "Deploying colour: $NEXT"

      # 8. Plan on PRs
      - name: Terraform plan
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          terraform plan \
            -var="environment=${{ steps.ws.outputs.ws }}" \
            -var="deployment_color=${{ steps.colour.outputs.next }}"

      # 9. Apply on push
      - name: Terraform apply
        if: ${{ github.event_name == 'push' }}
        run: |
          terraform apply -auto-approve \
            -var="environment=${{ steps.ws.outputs.ws }}" \
            -var="deployment_color=${{ steps.colour.outputs.next }}"

